%!PS-Adobe-3.0 EPSF-3.0
%%Title: Sequence Logo : 
%%Creator: Ceqlogo
%%CreationDate: 20.11.18 21:18:43
%%BoundingBox:   0  0  453 212 
%%Pages: 0
%%DocumentFonts: 
%%EndComments

% ---- CONSTANTS ----
/cmfactor 72 2.54 div def % defines points -> cm conversion
/cm {cmfactor mul} bind def % defines centimeters

% ---- VARIABLES ----

% NA = Nucleic Acid, AA = Amino Acid
/logoType (AA) def 

/logoTitle () def

% Dimensions in cm
/logoWidth 16 cm def
/logoHeight 7.5 cm def
/totalHeight 7.5 cm def

/yaxis true def
/yaxisLabel (bits) def
/yaxisBits  4.32193 def % bits
/yaxisTicBits 1 def

/xaxis true def
/xaxisLabel () def
/showEnds (false) def 

/showFineprint true def
/fineprint (MEME (no SSC) 20.11.18 21:18) def

/charsPerLine 14 def

/showingBox false def    
/shrinking false def   % true falses
/shrink  1.0 def
/outline false def

/IbeamFraction  1.0 def
/IbeamGray      0.50 def
/IbeamLineWidth 0.5 def

/fontsize       12 def
/titleFontsize  12 def
/smallFontsize  6 def

/topMargin      0.9 cm def
/bottomMargin   0.9 cm def

/defaultColor [0 0 0] def 

/fullColourDict <<
 (A)  [0.0000 0.0000 0.8000]
 (C)  [0.0000 0.0000 0.8000]
 (D)  [1.0000 0.0000 1.0000]
 (E)  [1.0000 0.0000 1.0000]
 (F)  [0.0000 0.0000 0.8000]
 (G)  [1.0000 0.7020 0.0000]
 (H)  [1.0000 0.8000 0.8000]
 (I)  [0.0000 0.0000 0.8000]
 (K)  [0.8000 0.0000 0.0000]
 (L)  [0.0000 0.0000 0.8000]
 (M)  [0.0000 0.0000 0.8000]
 (N)  [0.0000 0.5020 0.0000]
 (P)  [1.0000 1.0000 0.0000]
 (Q)  [0.0000 0.5020 0.0000]
 (R)  [0.8000 0.0000 0.0000]
 (S)  [0.0000 0.5020 0.0000]
 (T)  [0.0000 0.5020 0.0000]
 (V)  [0.0000 0.0000 0.8000]
 (W)  [0.0000 0.0000 0.8000]
 (Y)  [0.2000 0.9020 0.8000]
>> def
/mutedColourDict <<
 (A)  [0.6000 0.6000 1.0000]
 (C)  [0.6000 0.6000 1.0000]
 (D)  [1.0000 0.6667 1.0000]
 (E)  [1.0000 0.6667 1.0000]
 (F)  [0.6000 0.6000 1.0000]
 (G)  [1.0000 0.9007 0.6667]
 (H)  [1.0000 0.9333 0.9333]
 (I)  [0.6000 0.6000 1.0000]
 (K)  [1.0000 0.6000 0.6000]
 (L)  [0.6000 0.6000 1.0000]
 (M)  [0.6000 0.6000 1.0000]
 (N)  [0.5007 1.0000 0.5007]
 (P)  [1.0000 1.0000 0.6667]
 (Q)  [0.5007 1.0000 0.5007]
 (R)  [1.0000 0.6000 0.6000]
 (S)  [0.5007 1.0000 0.5007]
 (T)  [0.5007 1.0000 0.5007]
 (V)  [0.6000 0.6000 1.0000]
 (W)  [0.6000 0.6000 1.0000]
 (Y)  [0.7333 0.9673 0.9333]
>> def


/colorDict fullColourDict def

% ---- DERIVED PARAMETERS ----

/leftMargin
  fontsize 3.5 mul

def 

/rightMargin 
  %Add extra room if showing ends
  showEnds (false) eq { fontsize}{fontsize 1.5 mul} ifelse
def

/yaxisHeight 
  logoHeight 
  bottomMargin sub  
  topMargin sub
def

/ticWidth fontsize 2 div def

/pointsPerBit yaxisHeight yaxisBits div  def

/stackMargin 1 def

% Do not add space aroung characters if characters are boxed
/charRightMargin 
  showingBox { 0.0 } {stackMargin} ifelse
def

/charTopMargin 
  showingBox { 0.0 } {stackMargin} ifelse
def

/charWidth
  logoWidth
  leftMargin sub
  rightMargin sub
  charsPerLine div
  charRightMargin sub
def

/charWidth4 charWidth 4 div def
/charWidth2 charWidth 2 div def

/stackWidth 
  charWidth charRightMargin add
def
 
/numberFontsize 
  fontsize charWidth lt {fontsize}{charWidth} ifelse
def

% movements to place 5'/N and 3'/C symbols
/leftEndDeltaX  fontsize neg         def
/leftEndDeltaY  fontsize 1.5 mul neg def
/rightEndDeltaX fontsize 0.25 mul     def
/rightEndDeltaY leftEndDeltaY        def

% Outline width is proporional to charWidth, 
% but no less that 1 point
/outlinewidth 
  charWidth 32 div dup 1 gt  {}{pop 1} ifelse
def


% ---- PROCEDURES ----

/StartLogo { 
  % Save state
  save 
  gsave 

  % Print Logo Title, top center 
  gsave 
    SetStringFont

    logoWidth 2 div
    logoTitle
    stringwidth pop 2 div sub
    totalHeight
    titleFontsize sub
    moveto

    logoTitle
    show
  grestore

  % Print X-axis label, bottom center
  gsave
    SetStringFont

    logoWidth 2 div
    xaxisLabel
    stringwidth pop 2 div sub
    0
    titleFontsize 3 div
    add
    moveto

    xaxisLabel
    show
  grestore

  % Show Fine Print
  showFineprint {
    gsave
      SetSmallFont
      logoWidth
        fineprint stringwidth pop sub
        smallFontsize sub
          smallFontsize 3 div
      moveto
    
      fineprint show
    grestore
  } if

  % Move to lower left corner of last line, first stack
  leftMargin bottomMargin translate

  % Move above first line ready for StartLine 
  0 totalHeight translate

  SetLogoFont
} bind def

/EndLogo { 
  grestore 
  showpage 
  restore 
} bind def


/StartLine { 
  % move down to the bottom of the line:
  0 logoHeight neg translate
  
  gsave 
    yaxis { MakeYaxis } if
    xaxis { showEnds (true) eq {ShowLeftEnd} if } if
} bind def

/EndLine{ 
    xaxis { showEnds (true) eq {ShowRightEnd} if } if
  grestore 
} bind def


/MakeYaxis {
  gsave    
    stackMargin neg 0 translate
    ShowYaxisBar
    ShowYaxisLabel
  grestore
} bind def


/ShowYaxisBar { 
  gsave  
    SetStringFont

    /str 10 string def % string to hold number  
    /smallgap stackMargin 2 div def

    % Draw first tic and bar
    gsave    
      ticWidth neg 0 moveto 
      ticWidth 0 rlineto 
      0 yaxisHeight rlineto
      stroke
    grestore

   
    % Draw the tics
    % initial increment limit proc for
    0 yaxisTicBits yaxisBits abs %cvi
    {/loopnumber exch def

      % convert the number coming from the loop to a string
      % and find its width
      loopnumber 10 str cvrs
      /stringnumber exch def % string representing the number

      stringnumber stringwidth pop
      /numberwidth exch def % width of number to show

      /halfnumberheight
         stringnumber CharBoxHeight 2 div
      def

      numberwidth % move back width of number
      neg loopnumber pointsPerBit mul % shift on y axis
      halfnumberheight sub % down half the digit

      moveto % move back the width of the string

      ticWidth neg smallgap sub % Move back a bit more  
      0 rmoveto % move back the width of the tic  

      stringnumber show
      smallgap 0 rmoveto % Make a small gap  

      % now show the tic mark
      0 halfnumberheight rmoveto % shift up again
      ticWidth 0 rlineto
      stroke
    } for
  grestore
} bind def

/ShowYaxisLabel {
  gsave
    SetStringFont

    % How far we move left depends on the size of
    % the tic labels.
    /str 10 string def % string to hold number  
    yaxisBits yaxisTicBits div cvi yaxisTicBits mul 
    str cvs stringwidth pop
    ticWidth 1.5 mul  add neg  


    yaxisHeight
    yaxisLabel stringwidth pop
    sub 2 div

    translate
    90 rotate
    0 0 moveto
    yaxisLabel show
  grestore
} bind def


/StartStack {  % <stackNumber> startstack
  xaxis {MakeNumber}{pop} ifelse
  gsave
} bind def

/EndStack {
  grestore
  stackWidth 0 translate
} bind def


% Draw a character whose height is proportional to symbol bits
/MakeSymbol{ % charbits character MakeSymbol
  gsave
    /char exch def
    /bits exch def

    /bitsHeight 
       bits pointsPerBit mul 
    def

    /charHeight 
       bitsHeight charTopMargin sub
       dup 
       0.0 gt {}{pop 0.0} ifelse % if neg replace with zero 
    def 
 
    charHeight 0.0 gt {
      char SetColor
      charWidth charHeight char ShowChar

      showingBox { % Unfilled box
        0 0 charWidth charHeight false ShowBox
      } if


    } if

  grestore

  0 bitsHeight translate 
} bind def


/ShowChar { % <width> <height> <char> ShowChar
  gsave
    /tc exch def    % The character
    /ysize exch def % the y size of the character
    /xsize exch def % the x size of the character

    /xmulfactor 1 def 
    /ymulfactor 1 def
    /limmulfactor 0.01 def
    /drawable true def

  
    % if ysize is negative, make everything upside down!
    ysize 0 lt {
      % put ysize normal in this orientation
      /ysize ysize abs def
      xsize ysize translate
      180 rotate
    } if

    shrinking {
      xsize 1 shrink sub 2 div mul
        ysize 1 shrink sub 2 div mul translate 

      shrink shrink scale
    } if

    % Calculate the font scaling factors
    % Loop twice to catch small correction due to first scaling
    2 {
      gsave
        xmulfactor ymulfactor scale
      
        ysize % desired size of character in points
        tc CharBoxHeight 
        dup 0.0 ne {
          div % factor by which to scale up the character
          /ymulfactor exch def
        } % end if
        {pop pop}
        ifelse

        xsize % desired size of character in points
        tc CharBoxWidth  
        dup 0.0 ne {
          div % factor by which to scale up the character
          /xmulfactor exch def
        } % end if
        {pop pop}
        ifelse
      grestore
      % if the multiplication factors get too small we need to avoid a crash
      xmulfactor limmulfactor lt {
        /xmulfactor 1 def
        /drawable false def
      } if
      ymulfactor limmulfactor lt {
        /ymulfactor 1 def
        /drawable false def
      } if
    } repeat

    % Adjust horizontal position if the symbol is an I
    tc (I) eq {
      charWidth 2 div % half of requested character width
      tc CharBoxWidth 2 div % half of the actual character
      sub 0 translate
      % Avoid x scaling for I 
      /xmulfactor 1 def 
    } if


    % ---- Finally, draw the character
    drawable { 
      newpath
      xmulfactor ymulfactor scale

      % Move lower left corner of character to start point
      tc CharBox pop pop % llx lly : Lower left corner
      exch neg exch neg
      moveto

      outline {  % outline characters:
        outlinewidth setlinewidth
        tc true charpath
        gsave 1 setgray fill grestore
        clip stroke
      } { % regular characters
        tc show
      } ifelse
    } if

  grestore
} bind def


/ShowBox { % x1 y1 x2 y2 filled ShowBox
  gsave
    /filled exch def 
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath

    clip
    
    filled {
      fill
    }{ 
      0 setgray stroke   
    } ifelse

  grestore
} bind def


/MakeNumber { % number MakeNumber
  gsave
    SetNumberFont
    stackWidth 0 translate
    90 rotate % rotate so the number fits
    dup stringwidth pop % find the length of the number
    neg % prepare for move
    stackMargin sub % Move back a bit
    charWidth (0) CharBoxHeight % height of numbers
    sub 2 div %
    moveto % move back to provide space
    show
  grestore
} bind def


/Ibeam{ % heightInBits Ibeam
  gsave
    % Make an Ibeam of twice the given height in bits
    /height exch  pointsPerBit mul def 
    /heightDRAW height IbeamFraction mul def

    IbeamLineWidth setlinewidth
    IbeamGray setgray 

    charWidth2 height neg translate
    ShowIbar
    newpath
      0 0 moveto
      0 heightDRAW rlineto
    stroke
    newpath
      0 height moveto
      0 height rmoveto
      currentpoint translate
    ShowIbar
    newpath
    0 0 moveto
    0 heightDRAW neg rlineto
    currentpoint translate
    stroke
  grestore
} bind def


/ShowIbar { % make a horizontal bar
  gsave
    newpath
      charWidth4 neg 0 moveto
      charWidth4 0 lineto
    stroke
  grestore
} bind def


/ShowLeftEnd {
  gsave
    SetStringFont
    leftEndDeltaX leftEndDeltaY moveto
    logoType (NA) eq {(5) show ShowPrime} if
    logoType (AA) eq {(N) show} if
  grestore
} bind def


/ShowRightEnd { 
  gsave
    SetStringFont
    rightEndDeltaX rightEndDeltaY moveto
    logoType (NA) eq {(3) show ShowPrime} if
    logoType (AA) eq {(C) show} if
  grestore
} bind def


/ShowPrime {
  gsave
    SetPrimeFont
    (\242) show 
  grestore
} bind def

 
/SetColor{ % <char> SetColor
  dup colorDict exch known {
    colorDict exch get aload pop setrgbcolor
  } {
    pop
    defaultColor aload pop setrgbcolor
  } ifelse 
} bind def

% define fonts
/SetTitleFont {/Times-Bold findfont titleFontsize scalefont setfont} bind def
/SetLogoFont  {/Helvetica-Bold findfont charWidth  scalefont setfont} bind def
/SetStringFont{/Helvetica-Bold findfont fontsize scalefont setfont} bind def
/SetPrimeFont {/Symbol findfont fontsize scalefont setfont} bind def
/SetSmallFont {/Helvetica findfont smallFontsize scalefont setfont} bind def

/SetNumberFont {
    /Helvetica-Bold findfont 
    numberFontsize
    scalefont
    setfont
} bind def

%Take a single character and return the bounding box
/CharBox { % <char> CharBox <lx> <ly> <ux> <uy>
  gsave
    newpath
    0 0 moveto
    % take the character off the stack and use it here:
    true charpath 
    flattenpath 
    pathbbox % compute bounding box of 1 pt. char => lx ly ux uy
    % the path is here, but toss it away ...
  grestore
} bind def


% The height of a characters bounding box
/CharBoxHeight { % <char> CharBoxHeight <num>
  CharBox
  exch pop sub neg exch pop
} bind def


% The width of a characters bounding box
/CharBoxWidth { % <char> CharBoxHeight <num>
  CharBox
  pop exch pop sub neg 
} bind def

% Set the colour scheme to be faded to indicate trimming
/MuteColour {
  /colorDict mutedColourDict def
} def

% Restore the colour scheme to the normal colours
/RestoreColour {
  /colorDict fullColourDict def
} def

% Draw the background for a trimmed section
% takes the number of columns as a parameter
/DrawTrimBg { % <num> DrawTrimBox
  /col exch def
  
  /boxwidth 
    col stackWidth mul 
  def
 
  gsave
    0.97 setgray

    newpath
    0 0 moveto
    boxwidth 0 rlineto
    0 yaxisHeight rlineto
    0 yaxisHeight lineto
    closepath
    
    fill
  grestore
} def

/DrawTrimEdge {
  gsave
    0.2 setgray
    [2] 0 setdash

    newpath
    0 0 moveto
    0 yaxisHeight lineto
    
    stroke

} def


% Deprecated names
/startstack {StartStack} bind  def
/endstack {EndStack}     bind def
/makenumber {MakeNumber} bind def
/numchar { MakeSymbol }  bind def

%%EndProlog

%%Page: 1 1
StartLogo


StartLine
(1) startstack
 0.002641 (E) numchar
 0.002641 (H) numchar
 0.005282 (W) numchar
 0.007924 (C) numchar
 0.007924 (K) numchar
 0.007924 (M) numchar
 0.013206 (G) numchar
 0.015847 (P) numchar
 0.015847 (R) numchar
 0.026412 (T) numchar
 0.029053 (N) numchar
 0.036977 (Q) numchar
 0.079235 (S) numchar
 0.116212 (A) numchar
 0.139983 (F) numchar
 0.145265 (V) numchar
 0.179600 (I) numchar
 0.213936 (L) numchar
endstack

(2) startstack
 0.004388 (H) numchar
 0.004388 (K) numchar
 0.004388 (M) numchar
 0.008777 (Q) numchar
 0.021942 (N) numchar
 0.026330 (I) numchar
 0.026330 (P) numchar
 0.026330 (R) numchar
 0.030718 (C) numchar
 0.039495 (G) numchar
 0.039495 (T) numchar
 0.052660 (Y) numchar
 0.083379 (F) numchar
 0.092155 (V) numchar
 0.179922 (A) numchar
 0.197476 (L) numchar
 0.899611 (S) numchar
endstack

(3) startstack
 0.002928 (D) numchar
 0.002928 (M) numchar
 0.002928 (P) numchar
 0.005855 (Y) numchar
 0.008783 (E) numchar
 0.008783 (H) numchar
 0.011711 (K) numchar
 0.017566 (Q) numchar
 0.023422 (I) numchar
 0.026349 (T) numchar
 0.029277 (G) numchar
 0.029277 (R) numchar
 0.032205 (C) numchar
 0.055627 (V) numchar
 0.070265 (F) numchar
 0.093687 (A) numchar
 0.163952 (S) numchar
 0.272277 (L) numchar
 0.301555 (N) numchar
endstack

(4) startstack
 0.005885 (H) numchar
 0.005885 (Q) numchar
 0.008827 (D) numchar
 0.008827 (R) numchar
 0.008827 (Y) numchar
 0.011769 (N) numchar
 0.014711 (M) numchar
 0.020596 (P) numchar
 0.023538 (G) numchar
 0.035308 (C) numchar
 0.061788 (F) numchar
 0.064731 (I) numchar
 0.088269 (T) numchar
 0.105923 (V) numchar
 0.141230 (S) numchar
 0.241268 (L) numchar
 0.317768 (A) numchar
endstack

(5) startstack
 0.003867 (E) numchar
 0.003867 (G) numchar
 0.003867 (H) numchar
 0.003867 (M) numchar
 0.003867 (N) numchar
 0.003867 (Q) numchar
 0.003867 (W) numchar
 0.011600 (D) numchar
 0.015466 (P) numchar
 0.015466 (Y) numchar
 0.019333 (R) numchar
 0.027066 (S) numchar
 0.046399 (F) numchar
 0.057999 (C) numchar
 0.061865 (T) numchar
 0.197196 (V) numchar
 0.204929 (A) numchar
 0.282261 (L) numchar
 0.564521 (I) numchar
endstack

(6) startstack
 0.002259 (E) numchar
 0.002259 (K) numchar
 0.004519 (P) numchar
 0.006778 (V) numchar
 0.009037 (M) numchar
 0.018075 (Y) numchar
 0.020334 (R) numchar
 0.022593 (I) numchar
 0.024853 (H) numchar
 0.031631 (A) numchar
 0.036149 (G) numchar
 0.054224 (C) numchar
 0.054224 (N) numchar
 0.056484 (L) numchar
 0.099411 (F) numchar
 0.112967 (T) numchar
 0.115226 (Q) numchar
 0.223675 (S) numchar
endstack

(7) startstack
 0.008777 (I) numchar
 0.008777 (M) numchar
 0.008777 (Q) numchar
 0.008777 (V) numchar
 0.008777 (Y) numchar
 0.017553 (E) numchar
 0.017553 (L) numchar
 0.026330 (A) numchar
 0.026330 (S) numchar
 0.061436 (G) numchar
 0.096543 (T) numchar
 0.105319 (K) numchar
 3.080590 (R) numchar
endstack

(8) startstack
 0.010191 (Q) numchar
 0.020381 (G) numchar
 0.020381 (H) numchar
 0.101905 (K) numchar
 3.882590 (R) numchar
endstack

(9) startstack
 0.008068 (M) numchar
 0.008068 (R) numchar
 0.016135 (N) numchar
 0.016135 (V) numchar
 0.016135 (Y) numchar
 0.024203 (T) numchar
 0.088744 (A) numchar
 0.104879 (C) numchar
 0.354975 (S) numchar
 2.557434 (G) numchar
endstack

(10) startstack
 0.007922 (E) numchar
 0.015845 (V) numchar
 0.031690 (N) numchar
 0.047534 (A) numchar
 0.126758 (L) numchar
 0.594180 (F) numchar
 2.313339 (Y) numchar
endstack

(11) startstack
 0.007078 (K) numchar
 0.028313 (C) numchar
 0.070783 (T) numchar
 0.077861 (V) numchar
 0.113252 (G) numchar
 0.835237 (S) numchar
 1.670473 (A) numchar
endstack

(12) startstack
 0.006949 (Y) numchar
 0.013898 (L) numchar
 0.013898 (M) numchar
 0.013898 (Q) numchar
 0.020846 (I) numchar
 0.062539 (S) numchar
 0.083386 (G) numchar
 0.104232 (T) numchar
 0.701830 (V) numchar
 1.730255 (A) numchar
endstack

(13) startstack
 0.006616 (I) numchar
 0.006616 (L) numchar
 0.006616 (Q) numchar
 0.013232 (R) numchar
 0.019848 (D) numchar
 0.019848 (E) numchar
 0.026464 (K) numchar
 0.066161 (Y) numchar
 0.072777 (G) numchar
 0.092625 (V) numchar
 0.145553 (S) numchar
 0.330803 (T) numchar
 1.812802 (A) numchar
endstack

(14) startstack
 0.005600 (R) numchar
 0.011200 (E) numchar
 0.011200 (G) numchar
 0.011200 (M) numchar
 0.011200 (Q) numchar
 0.072801 (V) numchar
 0.106401 (P) numchar
 0.123201 (I) numchar
 0.196002 (T) numchar
 0.593607 (S) numchar
 1.075212 (A) numchar
endstack

EndLine


EndLogo

%%EOF
